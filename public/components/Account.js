class Account extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      fullname: '',
      email: '',
      password: ''
    };
    this.handleInput = this.handleInput.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleInput(event) {
    event.preventDefault();
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  handleSubmit(event) {
    event.preventDefault();
    this.props.accountSubmit(this.state);
    this.props.startShipping();
  }

  render() {
    return /*#__PURE__*/React.createElement("div", {
      className: "accountCreation"
    }, /*#__PURE__*/React.createElement("h2", {
      className: "createAccountTitle"
    }, "Create An Account To Checkout"), /*#__PURE__*/React.createElement("input", {
      className: "fullName",
      placeholder: "Full Name",
      name: "fullname",
      value: this.state.fullname,
      onChange: this.handleInput
    }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("input", {
      className: "email",
      placeholder: "Email Address",
      name: "email",
      value: this.state.email,
      onChange: this.handleInput
    }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("input", {
      className: "password",
      placeholder: "Create Password",
      name: "password",
      value: this.state.password,
      onChange: this.handleInput
    }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("button", {
      onClick: this.handleSubmit,
      className: "continueShipping"
    }, "Continue To Shipping Information"));
  }

}

export default Account;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9jb21wb25lbnRzL0FjY291bnQuanN4Il0sIm5hbWVzIjpbIkFjY291bnQiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsImZ1bGxuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImhhbmRsZUlucHV0IiwiYmluZCIsImhhbmRsZVN1Ym1pdCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzZXRTdGF0ZSIsInRhcmdldCIsIm5hbWUiLCJ2YWx1ZSIsImFjY291bnRTdWJtaXQiLCJzdGFydFNoaXBwaW5nIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFOLFNBQXNCQyxLQUFLLENBQUNDLFNBQTVCLENBQXNDO0FBQ3BDQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNqQixVQUFNQSxLQUFOO0FBRUEsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLE1BQUFBLFFBQVEsRUFBRSxFQURDO0FBRVhDLE1BQUFBLEtBQUssRUFBRSxFQUZJO0FBR1hDLE1BQUFBLFFBQVEsRUFBRTtBQUhDLEtBQWI7QUFNQSxTQUFLQyxXQUFMLEdBQW1CLEtBQUtBLFdBQUwsQ0FBaUJDLElBQWpCLENBQXNCLElBQXRCLENBQW5CO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixLQUFLQSxZQUFMLENBQWtCRCxJQUFsQixDQUF1QixJQUF2QixDQUFwQjtBQUNEOztBQUVERCxFQUFBQSxXQUFXLENBQUNHLEtBQUQsRUFBUTtBQUNqQkEsSUFBQUEsS0FBSyxDQUFDQyxjQUFOO0FBQ0EsU0FBS0MsUUFBTCxDQUFjO0FBQ1osT0FBQ0YsS0FBSyxDQUFDRyxNQUFOLENBQWFDLElBQWQsR0FBcUJKLEtBQUssQ0FBQ0csTUFBTixDQUFhRTtBQUR0QixLQUFkO0FBR0Q7O0FBRUROLEVBQUFBLFlBQVksQ0FBQ0MsS0FBRCxFQUFRO0FBQ2xCQSxJQUFBQSxLQUFLLENBQUNDLGNBQU47QUFDQSxTQUFLVCxLQUFMLENBQVdjLGFBQVgsQ0FBeUIsS0FBS2IsS0FBOUI7QUFDQSxTQUFLRCxLQUFMLENBQVdlLGFBQVg7QUFDRDs7QUFFREMsRUFBQUEsTUFBTSxHQUFHO0FBQ1Asd0JBQ0U7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNFO0FBQUksTUFBQSxTQUFTLEVBQUU7QUFBZix1Q0FERixlQUdJO0FBQ0EsTUFBQSxTQUFTLEVBQUMsVUFEVjtBQUVBLE1BQUEsV0FBVyxFQUFDLFdBRlo7QUFHQSxNQUFBLElBQUksRUFBQyxVQUhMO0FBSUEsTUFBQSxLQUFLLEVBQUUsS0FBS2YsS0FBTCxDQUFXQyxRQUpsQjtBQUtBLE1BQUEsUUFBUSxFQUFFLEtBQUtHO0FBTGYsTUFISixlQVdJLCtCQVhKLGVBWUksK0JBWkosZUFjSTtBQUNBLE1BQUEsU0FBUyxFQUFDLE9BRFY7QUFFQSxNQUFBLFdBQVcsRUFBQyxlQUZaO0FBR0EsTUFBQSxJQUFJLEVBQUMsT0FITDtBQUlBLE1BQUEsS0FBSyxFQUFFLEtBQUtKLEtBQUwsQ0FBV0UsS0FKbEI7QUFLQSxNQUFBLFFBQVEsRUFBRSxLQUFLRTtBQUxmLE1BZEosZUFzQkksK0JBdEJKLGVBdUJJLCtCQXZCSixlQXlCSTtBQUNBLE1BQUEsU0FBUyxFQUFDLFVBRFY7QUFFQSxNQUFBLFdBQVcsRUFBQyxpQkFGWjtBQUdBLE1BQUEsSUFBSSxFQUFDLFVBSEw7QUFJQSxNQUFBLEtBQUssRUFBRSxLQUFLSixLQUFMLENBQVdHLFFBSmxCO0FBS0EsTUFBQSxRQUFRLEVBQUUsS0FBS0M7QUFMZixNQXpCSixlQWlDSSwrQkFqQ0osZUFrQ0ksK0JBbENKLGVBb0NJO0FBQ0EsTUFBQSxPQUFPLEVBQUUsS0FBS0UsWUFEZDtBQUVBLE1BQUEsU0FBUyxFQUFDO0FBRlYsMENBcENKLENBREY7QUEyQ0Q7O0FBdkVtQzs7QUEwRXRDLGVBQWVYLE9BQWYiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBY2NvdW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZnVsbG5hbWU6ICcnLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgcGFzc3dvcmQ6ICcnXG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVJbnB1dCA9IHRoaXMuaGFuZGxlSW5wdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVJbnB1dChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbZXZlbnQudGFyZ2V0Lm5hbWVdOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlU3VibWl0KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLmFjY291bnRTdWJtaXQodGhpcy5zdGF0ZSk7XG4gICAgdGhpcy5wcm9wcy5zdGFydFNoaXBwaW5nKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdhY2NvdW50Q3JlYXRpb24nPlxuICAgICAgICA8aDIgY2xhc3NOYW1lID0nY3JlYXRlQWNjb3VudFRpdGxlJz5DcmVhdGUgQW4gQWNjb3VudCBUbyBDaGVja291dDwvaDI+XG5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzc05hbWU9J2Z1bGxOYW1lJ1xuICAgICAgICAgIHBsYWNlaG9sZGVyPSdGdWxsIE5hbWUnXG4gICAgICAgICAgbmFtZT0nZnVsbG5hbWUnXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZnVsbG5hbWV9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXR9XG4gICAgICAgICAgPjwvaW5wdXQ+XG5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8YnIgLz5cblxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT0nZW1haWwnXG4gICAgICAgICAgcGxhY2Vob2xkZXI9J0VtYWlsIEFkZHJlc3MnXG4gICAgICAgICAgbmFtZT0nZW1haWwnXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXR9XG4gICAgICAgICAgPjwvaW5wdXQ+XG5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8YnIgLz5cblxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT0ncGFzc3dvcmQnXG4gICAgICAgICAgcGxhY2Vob2xkZXI9J0NyZWF0ZSBQYXNzd29yZCdcbiAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYXNzd29yZH1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dH1cbiAgICAgICAgICA+PC9pbnB1dD5cblxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIDxiciAvPlxuXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlU3VibWl0fVxuICAgICAgICAgIGNsYXNzTmFtZT0nY29udGludWVTaGlwcGluZyc+Q29udGludWUgVG8gU2hpcHBpbmcgSW5mb3JtYXRpb248L2J1dHRvbj5cblxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjY291bnQ7Il19